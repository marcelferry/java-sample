/*
 * Created on 4 abr 2018 ( Time 10:39:56 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package br.com.marcelferry.javasample.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import br.com.marcelferry.javasample.business.service.impl.ContacorrenteServiceImpl;
import br.com.marcelferry.javasample.business.service.mapping.ContacorrenteServiceMapper;
import br.com.marcelferry.javasample.data.model.Contacorrente;
import br.com.marcelferry.javasample.data.model.jpa.ContacorrenteEntity;
import br.com.marcelferry.javasample.data.repository.jpa.ContacorrenteJpaRepository;
import br.com.marcelferry.javasample.test.ContacorrenteEntityFactoryForTest;
import br.com.marcelferry.javasample.test.MockValues;

/**
 * Test : Implementation of ContacorrenteService
 */
@RunWith(MockitoJUnitRunner.class)
public class ContacorrenteServiceImplTest {

	@InjectMocks
	private ContacorrenteServiceImpl contacorrenteService;
	@Mock
	private ContacorrenteJpaRepository contacorrenteJpaRepository;
	@Mock
	private ContacorrenteServiceMapper contacorrenteServiceMapper;
	
	private ContacorrenteEntityFactoryForTest contacorrenteEntityFactoryForTest = new ContacorrenteEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ContacorrenteEntity contacorrenteEntity = contacorrenteJpaRepository.findOne(id);
		
		Contacorrente contacorrente = newContacorrente();
		when(contacorrenteServiceMapper.mapContacorrenteEntityToContacorrente(contacorrenteEntity)).thenReturn(contacorrente);

		// When
		Contacorrente contacorrenteFound = contacorrenteService.findById(id);

		// Then
		assertEquals(contacorrente.getId(),contacorrenteFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ContacorrenteEntity> contacorrenteEntitys = new ArrayList<ContacorrenteEntity>();
		ContacorrenteEntity contacorrenteEntity1 = contacorrenteEntityFactoryForTest.newContacorrenteEntity();
		contacorrenteEntitys.add(contacorrenteEntity1);
		ContacorrenteEntity contacorrenteEntity2 = contacorrenteEntityFactoryForTest.newContacorrenteEntity();
		contacorrenteEntitys.add(contacorrenteEntity2);
		when(contacorrenteJpaRepository.findAll()).thenReturn(contacorrenteEntitys);
		
		Contacorrente contacorrente1 = newContacorrente();
		when(contacorrenteServiceMapper.mapContacorrenteEntityToContacorrente(contacorrenteEntity1)).thenReturn(contacorrente1);
		Contacorrente contacorrente2 = newContacorrente();
		when(contacorrenteServiceMapper.mapContacorrenteEntityToContacorrente(contacorrenteEntity2)).thenReturn(contacorrente2);

		// When
		List<Contacorrente> contacorrentesFounds = contacorrenteService.findAll();

		// Then
		assertTrue(contacorrente1 == contacorrentesFounds.get(0));
		assertTrue(contacorrente2 == contacorrentesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Contacorrente contacorrente = newContacorrente();

		ContacorrenteEntity contacorrenteEntity = contacorrenteEntityFactoryForTest.newContacorrenteEntity();
		when(contacorrenteJpaRepository.findOne(contacorrente.getId())).thenReturn(null);
		
		contacorrenteEntity = new ContacorrenteEntity();
		contacorrenteServiceMapper.mapContacorrenteToContacorrenteEntity(contacorrente, contacorrenteEntity);
		ContacorrenteEntity contacorrenteEntitySaved = contacorrenteJpaRepository.save(contacorrenteEntity);
		
		Contacorrente contacorrenteSaved = newContacorrente();
		when(contacorrenteServiceMapper.mapContacorrenteEntityToContacorrente(contacorrenteEntitySaved)).thenReturn(contacorrenteSaved);

		// When
		Contacorrente contacorrenteResult = contacorrenteService.create(contacorrente);

		// Then
		assertTrue(contacorrenteResult == contacorrenteSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Contacorrente contacorrente = newContacorrente();

		ContacorrenteEntity contacorrenteEntity = contacorrenteEntityFactoryForTest.newContacorrenteEntity();
		when(contacorrenteJpaRepository.findOne(contacorrente.getId())).thenReturn(contacorrenteEntity);

		// When
		Exception exception = null;
		try {
			contacorrenteService.create(contacorrente);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Contacorrente contacorrente = newContacorrente();

		ContacorrenteEntity contacorrenteEntity = contacorrenteEntityFactoryForTest.newContacorrenteEntity();
		when(contacorrenteJpaRepository.findOne(contacorrente.getId())).thenReturn(contacorrenteEntity);
		
		ContacorrenteEntity contacorrenteEntitySaved = contacorrenteEntityFactoryForTest.newContacorrenteEntity();
		when(contacorrenteJpaRepository.save(contacorrenteEntity)).thenReturn(contacorrenteEntitySaved);
		
		Contacorrente contacorrenteSaved = newContacorrente();
		when(contacorrenteServiceMapper.mapContacorrenteEntityToContacorrente(contacorrenteEntitySaved)).thenReturn(contacorrenteSaved);

		// When
		Contacorrente contacorrenteResult = contacorrenteService.update(contacorrente);

		// Then
		verify(contacorrenteServiceMapper).mapContacorrenteToContacorrenteEntity(contacorrente, contacorrenteEntity);
		assertTrue(contacorrenteResult == contacorrenteSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		contacorrenteService.delete(id);

		// Then
		verify(contacorrenteJpaRepository).delete(id);
		
	}
	

    public Contacorrente newContacorrente() {

		Long id = mockValues.nextLong();
		String descricao = mockValues.nextString(20);

		Contacorrente contacorrente = new Contacorrente();
		contacorrente.setId(id);
		contacorrente.setDescricao(descricao);
		return contacorrente;
	}

}

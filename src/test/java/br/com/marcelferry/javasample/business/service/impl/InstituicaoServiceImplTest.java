/*
 * Created on 4 abr 2018 ( Time 10:39:56 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package br.com.marcelferry.javasample.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import br.com.marcelferry.javasample.business.service.impl.InstituicaoServiceImpl;
import br.com.marcelferry.javasample.business.service.mapping.InstituicaoServiceMapper;
import br.com.marcelferry.javasample.data.model.Instituicao;
import br.com.marcelferry.javasample.data.model.jpa.InstituicaoEntity;
import br.com.marcelferry.javasample.data.repository.jpa.InstituicaoJpaRepository;
import br.com.marcelferry.javasample.test.InstituicaoEntityFactoryForTest;
import br.com.marcelferry.javasample.test.MockValues;

/**
 * Test : Implementation of InstituicaoService
 */
@RunWith(MockitoJUnitRunner.class)
public class InstituicaoServiceImplTest {

	@InjectMocks
	private InstituicaoServiceImpl instituicaoService;
	@Mock
	private InstituicaoJpaRepository instituicaoJpaRepository;
	@Mock
	private InstituicaoServiceMapper instituicaoServiceMapper;
	
	private InstituicaoEntityFactoryForTest instituicaoEntityFactoryForTest = new InstituicaoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		InstituicaoEntity instituicaoEntity = instituicaoJpaRepository.findOne(id);
		
		Instituicao instituicao = newInstituicao();
		when(instituicaoServiceMapper.mapInstituicaoEntityToInstituicao(instituicaoEntity)).thenReturn(instituicao);

		// When
		Instituicao instituicaoFound = instituicaoService.findById(id);

		// Then
		assertEquals(instituicao.getId(),instituicaoFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<InstituicaoEntity> instituicaoEntitys = new ArrayList<InstituicaoEntity>();
		InstituicaoEntity instituicaoEntity1 = instituicaoEntityFactoryForTest.newInstituicaoEntity();
		instituicaoEntitys.add(instituicaoEntity1);
		InstituicaoEntity instituicaoEntity2 = instituicaoEntityFactoryForTest.newInstituicaoEntity();
		instituicaoEntitys.add(instituicaoEntity2);
		when(instituicaoJpaRepository.findAll()).thenReturn(instituicaoEntitys);
		
		Instituicao instituicao1 = newInstituicao();
		when(instituicaoServiceMapper.mapInstituicaoEntityToInstituicao(instituicaoEntity1)).thenReturn(instituicao1);
		Instituicao instituicao2 = newInstituicao();
		when(instituicaoServiceMapper.mapInstituicaoEntityToInstituicao(instituicaoEntity2)).thenReturn(instituicao2);

		// When
		List<Instituicao> instituicaosFounds = instituicaoService.findAll();

		// Then
		assertTrue(instituicao1 == instituicaosFounds.get(0));
		assertTrue(instituicao2 == instituicaosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Instituicao instituicao = newInstituicao();

		InstituicaoEntity instituicaoEntity = instituicaoEntityFactoryForTest.newInstituicaoEntity();
		when(instituicaoJpaRepository.findOne(instituicao.getId())).thenReturn(null);
		
		instituicaoEntity = new InstituicaoEntity();
		instituicaoServiceMapper.mapInstituicaoToInstituicaoEntity(instituicao, instituicaoEntity);
		InstituicaoEntity instituicaoEntitySaved = instituicaoJpaRepository.save(instituicaoEntity);
		
		Instituicao instituicaoSaved = newInstituicao();
		when(instituicaoServiceMapper.mapInstituicaoEntityToInstituicao(instituicaoEntitySaved)).thenReturn(instituicaoSaved);

		// When
		Instituicao instituicaoResult = instituicaoService.create(instituicao);

		// Then
		assertTrue(instituicaoResult == instituicaoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Instituicao instituicao = newInstituicao();

		InstituicaoEntity instituicaoEntity = instituicaoEntityFactoryForTest.newInstituicaoEntity();
		when(instituicaoJpaRepository.findOne(instituicao.getId())).thenReturn(instituicaoEntity);

		// When
		Exception exception = null;
		try {
			instituicaoService.create(instituicao);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Instituicao instituicao = newInstituicao();

		InstituicaoEntity instituicaoEntity = instituicaoEntityFactoryForTest.newInstituicaoEntity();
		when(instituicaoJpaRepository.findOne(instituicao.getId())).thenReturn(instituicaoEntity);
		
		InstituicaoEntity instituicaoEntitySaved = instituicaoEntityFactoryForTest.newInstituicaoEntity();
		when(instituicaoJpaRepository.save(instituicaoEntity)).thenReturn(instituicaoEntitySaved);
		
		Instituicao instituicaoSaved = newInstituicao();
		when(instituicaoServiceMapper.mapInstituicaoEntityToInstituicao(instituicaoEntitySaved)).thenReturn(instituicaoSaved);

		// When
		Instituicao instituicaoResult = instituicaoService.update(instituicao);

		// Then
		verify(instituicaoServiceMapper).mapInstituicaoToInstituicaoEntity(instituicao, instituicaoEntity);
		assertTrue(instituicaoResult == instituicaoSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		instituicaoService.delete(id);

		// Then
		verify(instituicaoJpaRepository).delete(id);
		
	}
	

    public Instituicao newInstituicao() {

		Long id = mockValues.nextLong();
		String descricao = mockValues.nextString(20);

		Instituicao instituicao = new Instituicao();
		instituicao.setId(id);
		instituicao.setDescricao(descricao);
		return instituicao;
	}

}
